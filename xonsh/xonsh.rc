#!/usr/bin/python

from os import chdir, getcwd

source-bash ~/.fzf.bash > /dev/null

$VI_MODE = True
$PGUSER = 'postgres'

xontrib load vox
xontrib load fzf-widgets

fuzzies = {
    'git': [
        'git status',
        'git gud',
        'git rekt',
        'git add -p',
    ],
    'django': [
        './manage.py runserver',
        './manage.py runserver_plus --nopin',
        './manage.py migrate',
        './manage.py shell',
        './manage.py shell_plus',
    ],
    'site': [
        'python -m webbrowser -t https://builds2.lukkien.com',
        'python -m webbrowser -t https://git.lukkien.com',
        'python -m webbrowser -t https://kms.lukkien.com',
        'python -m webbrowser -t https://apps.timewax.com/calendar/',
        'python -m webbrowser -t https://www.youtube.com',
        'python -m webbrowser -t https://apps.timewax.com/timesheets/',
        'python -m webbrowser -t https://lukkien-digital.slack.com/',
        'python -m webbrowser -t http://docs:8001/',
    ],
    'xonsh': [
        'vox activate {}',
    ],
}

def _fuzzy_command(args):
    all_commands = []
    for _, commands in fuzzies.items():
        all_commands.extend(commands)
            
    try:
        keyword = args.pop(0)
    except IndexError:
        available_commands = all_commands
    else:
        try:
            available_commands = fuzzies[keyword]
        except KeyError:
            available_commands = [command for command in all_commands if keyword in command]

    if len(available_commands) == 1:
        command = available_commands[0]
    else:
        command = $(echo @('\n'.join(available_commands)) |fzf |xargs echo)

    command = command.strip()
    if '{' in command and '}' in command:
        arguments = input("'{}': ".format(command)).split()
        command = command.format(*arguments)

    print('[ {} ]'.format(command))
    @(command.split())


def _run_trigger_command(args):
    cmd = ' '.join(args)
    full_cmd = ['bash', '-c', 'echo ~/.trigger |entr {}'.format(cmd)]
    @(full_cmd)


class DirStack:
    favorites = [
        '/home/mephisto/src/dotfiles',
    ]
    def __init__(self, limit=100):
        self._limit = limit
        self._reset()

    def _reset(self):
        self._jumplist = [
            getcwd(),
        ] + self.favorites

    def _log_dir(self, d):
        if not d in self._jumplist:
            self._jumplist.append(d)
            while len(self._jumplist) > self._limit:
                self._jumplist.pop(-1)

    def try_jump(self, keyword):
        matches = [p for p in self._jumplist if keyword.upper() in p.upper()]
        if not matches:
            return

        if len(matches) == 1:
            chdir(matches[0])
        else:
            self.interactive(matches)

    def interactive(self, matches=None):
        if not matches:
            matches = self._jumplist

        for i, line in enumerate(matches):
            print('{}: {}'.format(i, line))
        requested = input('please choose a directory or (c)ancel: ')
        try:
            chdir(matches[int(requested)])
        except (ValueError, IndexError):
            pass


_dirstack = DirStack()

@events.on_chdir
def _bookmark_dir(olddir, newdir, **kw):
    _dirstack._log_dir(newdir)

def _try_jump(args):
    if args:
        _dirstack.try_jump(args[0])
    else:
        _dirstack.interactive()

@events.vox_on_activate
def post_activate(name, *args, **kwargs):
    from os import path
    venv_dir = '/home/mephisto/.virtualenvs/{}'.format(name)
    script_name = '{}/bin/post_activate'.format(venv_dir)

    _dirstack._log_dir('{}/lib/python3.5/site-packages'.format(venv_dir))

    if path.exists(script_name):
        print('loading {}'.format(script_name))
        source @(script_name)


aliases.update({
    'cat': 'ccat --bg=dark',
    'mrs': './manage.py runserver_plus --nopin',
    'msh': './manage.py shell_plus',
    'watchhtml': 'ag --html -l|entr touch manage.py &',
    'runtags': 'ctags -R --exclude=.tox --languages=Python .',
    'j': _try_jump,
    'a': _fuzzy_command,
    't': _run_trigger_command,
    'pbcopy': "xclip -i -selection clipboard",
    'pbpaste': "xclip -i -selection clipboard -o",
    'tak': "bash -c \"git co `git branch|fzf`\""
})

$fzf_ssh_binding = Keys.ControlS
$fzf_history_binding = Keys.ControlR
